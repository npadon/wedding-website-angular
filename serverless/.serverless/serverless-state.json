{
  "service": {
    "service": "wedding-website-angular",
    "serviceObject": {
      "name": "wedding-website-angular"
    },
    "provider": {
      "name": "aws",
      "runtime": "python3.8",
      "stage": "dev",
      "region": "us-east-1",
      "stackName": "wedding-website-angular-stack",
      "memorySize": 128,
      "timeout": 10,
      "logRetentionInDays": 14,
      "tags": {
        "service": "wedding-website-angular",
        "author": "Nick Padon",
        "stage": "dev"
      },
      "iam": {
        "role": "LambdaBaseRole"
      },
      "environment": {
        "IS_DEPLOYED": "true",
        "ENV": "dev",
        "SERVICE": "wedding-website-angular"
      },
      "deploymentBucket": null,
      "apiName": "wedding-website-angular-dev",
      "endpointType": "EDGE",
      "apiGateway": {
        "shouldStartNameWithService": true,
        "resourcePolicy": [
          {
            "Effect": "Allow",
            "Principal": "*",
            "Action": [
              "execute-api:Invoke"
            ],
            "Resource": "execute-api:/*/*/*"
          }
        ],
        "usagePlan": {
          "quota": {
            "limit": 5000,
            "offset": 2,
            "period": "MONTH"
          }
        }
      },
      "lambdaHashingVersion": "20201221",
      "layers": [
        {
          "Ref": "PythonRequirementsLambdaLayer"
        }
      ],
      "versionFunctions": true,
      "deploymentBucketObject": {
        "blockPublicAccess": true
      },
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              },
              "PublicAccessBlockConfiguration": {
                "BlockPublicAcls": true,
                "BlockPublicPolicy": true,
                "IgnorePublicAcls": true,
                "RestrictPublicBuckets": true
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "RsvpWriteLambdaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wedding-website-angular-post-rsvp-lambda-dev",
              "RetentionInDays": 14
            }
          },
          "RsvpReadLambdaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/wedding-website-angular-get-rsvp-lambda-dev",
              "RetentionInDays": 14
            }
          },
          "PythonRequirementsLambdaLayer": {
            "Type": "AWS::Lambda::LayerVersion",
            "Properties": {
              "Content": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/wedding-website-angular/dev/1627333392121-2021-07-26T21:03:12.121Z/pythonRequirements.zip"
              },
              "LayerName": "wedding-website-angular-libraries-lambda-layer-dev",
              "Description": "Python requirements lambda layer",
              "CompatibleRuntimes": [
                "python3.8"
              ]
            }
          },
          "RsvpWriteLambdaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/wedding-website-angular/dev/1627333392121-2021-07-26T21:03:12.121Z/wedding-website-angular.zip"
              },
              "Handler": "functions/rsvp/handler.post",
              "Runtime": "python3.8",
              "FunctionName": "wedding-website-angular-post-rsvp-lambda-dev",
              "MemorySize": 128,
              "Timeout": 10,
              "Tags": [
                {
                  "Key": "service",
                  "Value": "wedding-website-angular"
                },
                {
                  "Key": "author",
                  "Value": "Nick Padon"
                },
                {
                  "Key": "stage",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "IS_DEPLOYED": "true",
                  "ENV": "dev",
                  "SERVICE": "wedding-website-angular"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "LambdaBaseRole",
                  "Arn"
                ]
              },
              "Layers": {
                "$ref": "$[\"service\"][\"provider\"][\"layers\"]"
              }
            },
            "DependsOn": [
              "RsvpWriteLambdaLogGroup",
              "LambdaBaseRole"
            ]
          },
          "RsvpReadLambdaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/wedding-website-angular/dev/1627333392121-2021-07-26T21:03:12.121Z/wedding-website-angular.zip"
              },
              "Handler": "functions/rsvp/handler.get",
              "Runtime": "python3.8",
              "FunctionName": "wedding-website-angular-get-rsvp-lambda-dev",
              "MemorySize": 128,
              "Timeout": 10,
              "Tags": [
                {
                  "Key": "service",
                  "Value": "wedding-website-angular"
                },
                {
                  "Key": "author",
                  "Value": "Nick Padon"
                },
                {
                  "Key": "stage",
                  "Value": "dev"
                }
              ],
              "Environment": {
                "Variables": {
                  "IS_DEPLOYED": "true",
                  "ENV": "dev",
                  "SERVICE": "wedding-website-angular"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "LambdaBaseRole",
                  "Arn"
                ]
              },
              "Layers": {
                "$ref": "$[\"service\"][\"provider\"][\"layers\"]"
              }
            },
            "DependsOn": [
              "RsvpReadLambdaLogGroup",
              "LambdaBaseRole"
            ]
          },
          "RsvpWriteLambdaLambdaVersionZYLg2TJFvXiXcSJtuzBFsDQ3tRh4Ty7sKcl2IhE91I": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RsvpWriteLambdaLambdaFunction"
              },
              "CodeSha256": "RgyVmA7oKjN7gk/TgRR4TsJ0Ld9Fl9V/DIvPA9AwItk="
            }
          },
          "RsvpReadLambdaLambdaVersionxRsR7WwhnrvP2VvhMvaqdg5xD0Xk6p5RncSqG4q7wqs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RsvpReadLambdaLambdaFunction"
              },
              "CodeSha256": "RgyVmA7oKjN7gk/TgRR4TsJ0Ld9Fl9V/DIvPA9AwItk="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "wedding-website-angular-dev",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": [
                      "execute-api:Invoke"
                    ],
                    "Resource": "execute-api:/*/*/*"
                  }
                ]
              }
            }
          },
          "ApiGatewayResourceV1": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "v1",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceV1Rsvp": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceV1"
              },
              "PathPart": "rsvp",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodV1RsvpOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceV1Rsvp"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodV1RsvpPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceV1Rsvp"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RsvpWriteLambdaLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "RsvpWriteLambdaLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodV1RsvpGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceV1Rsvp"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RsvpReadLambdaLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "RsvpReadLambdaLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1627333375905": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodV1RsvpOptions",
              "ApiGatewayMethodV1RsvpPost",
              "ApiGatewayMethodV1RsvpGet"
            ]
          },
          "ApiGatewayUsagePlan": {
            "Type": "AWS::ApiGateway::UsagePlan",
            "DependsOn": "ApiGatewayDeployment1627333375905",
            "Properties": {
              "ApiStages": [
                {
                  "ApiId": {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "Stage": "dev"
                }
              ],
              "Description": "Usage plan for wedding-website-angular dev stage",
              "UsagePlanName": "wedding-website-angular-dev",
              "Quota": {
                "Limit": 5000,
                "Offset": 2,
                "Period": "MONTH"
              }
            }
          },
          "RsvpWriteLambdaLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RsvpWriteLambdaLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RsvpReadLambdaLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RsvpReadLambdaLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "LambdaBasePolicy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
              "ManagedPolicyName": {
                "Fn::Sub": "wedding-website-angular-lambda-base-policy-dev"
              },
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "iam:GetRole"
                    ],
                    "Resource": {
                      "Fn::Sub": "arn:aws:iam::722958364712:role/wedding-website-angular-*-dev"
                    }
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "lambda:GetFunctionConfiguration",
                      "lambda:GetFunction",
                      "lambda:InvokeFunction",
                      "lambda:GetEventSourceMapping"
                    ],
                    "Resource": [
                      {
                        "Fn::Sub": "arn:aws:lambda:us-east-1:722958364712:function:wedding-website-angular-*-dev"
                      }
                    ]
                  },
                  {
                    "Effect": "Allow",
                    "Action": [
                      "ec2:DescribeSecurityGroups"
                    ],
                    "Resource": "*"
                  },
                  {
                    "Sid": "WriteToCloudWatchLogs",
                    "Effect": "Allow",
                    "Action": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents"
                    ],
                    "Resource": "*"
                  },
                  {
                    "Sid": "ListObjectsInThisAppsBucketsAcrossStageAccounts",
                    "Effect": "Allow",
                    "Action": "s3:ListBucket",
                    "Resource": "arn:aws:s3:::wedding-website-angular-*"
                  },
                  {
                    "Sid": "AllObjectActionsInThisAppsBucketsAcrossStageAccounts",
                    "Effect": "Allow",
                    "Action": [
                      "s3:*Object",
                      "s3:*ObjectAcl"
                    ],
                    "Resource": "arn:aws:s3:::wedding-website-angular-*/*"
                  }
                ]
              }
            }
          },
          "LambdaBaseRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "RoleName": "wedding-website-angular-lambda-base-role",
              "Description": "Provides common Lambda function permissions necessary for accessing resources during execution.",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Path": "/",
              "ManagedPolicyArns": [
                {
                  "Ref": "LambdaBasePolicy"
                }
              ]
            }
          },
          "DataBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "wedding-website-angular-rsvp-bucket-s3-dev"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-wedding-website-angular-dev-ServerlessDeploymentBucketName"
            }
          },
          "PythonRequirementsLambdaLayerQualifiedArn": {
            "Description": "Current Lambda layer version",
            "Value": {
              "Ref": "PythonRequirementsLambdaLayer"
            },
            "Export": {
              "Name": "sls-wedding-website-angular-dev-PythonRequirementsLambdaLayerQualifiedArn"
            }
          },
          "PythonRequirementsLambdaLayerHash": {
            "Description": "Current Lambda layer hash",
            "Value": "259beeef8ee3fd4211850b87a78e7bef440e6e38",
            "Export": {
              "Name": "sls-wedding-website-angular-dev-PythonRequirementsLambdaLayerHash"
            }
          },
          "PythonRequirementsLambdaLayerS3Key": {
            "Description": "Current Lambda layer S3Key",
            "Value": "serverless/wedding-website-angular/dev/1627333392121-2021-07-26T21:03:12.121Z/pythonRequirements.zip",
            "Export": {
              "Name": "sls-wedding-website-angular-dev-PythonRequirementsLambdaLayerS3Key"
            }
          },
          "RsvpWriteLambdaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RsvpWriteLambdaLambdaVersionZYLg2TJFvXiXcSJtuzBFsDQ3tRh4Ty7sKcl2IhE91I"
            },
            "Export": {
              "Name": "sls-wedding-website-angular-dev-RsvpWriteLambdaLambdaFunctionQualifiedArn"
            }
          },
          "RsvpReadLambdaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RsvpReadLambdaLambdaVersionxRsR7WwhnrvP2VvhMvaqdg5xD0Xk6p5RncSqG4q7wqs"
            },
            "Export": {
              "Name": "sls-wedding-website-angular-dev-RsvpReadLambdaLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-wedding-website-angular-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              },
              "PublicAccessBlockConfiguration": {
                "BlockPublicAcls": true,
                "BlockPublicPolicy": true,
                "IgnorePublicAcls": true,
                "RestrictPublicBuckets": true
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "dev": {
        "isDeployed": true
      },
      "local": {
        "isDeployed": false
      },
      "pythonRequirements": {
        "dockerizePip": false,
        "layer": {
          "name": "wedding-website-angular-libraries-lambda-layer-dev",
          "description": "Python requirements lambda layer",
          "compatibleRuntimes": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"PythonRequirementsLambdaLayer\"][\"Properties\"][\"CompatibleRuntimes\"]"
          },
          "retain": false
        }
      },
      "s3": {
        "host": "localhost",
        "directory": "/tmp"
      }
    },
    "plugins": [
      "serverless-python-requirements",
      "serverless-s3-local",
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "rsvpWriteLambda": {
        "name": "wedding-website-angular-post-rsvp-lambda-dev",
        "handler": "functions/rsvp/handler.post",
        "timeout": 10,
        "events": [
          {
            "http": {
              "path": "v1/rsvp",
              "method": "post",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {},
        "memory": 128,
        "runtime": "python3.8",
        "vpc": {},
        "versionLogicalId": "RsvpWriteLambdaLambdaVersionZYLg2TJFvXiXcSJtuzBFsDQ3tRh4Ty7sKcl2IhE91I"
      },
      "rsvpReadLambda": {
        "name": "wedding-website-angular-get-rsvp-lambda-dev",
        "handler": "functions/rsvp/handler.get",
        "timeout": 10,
        "events": [
          {
            "http": {
              "path": "v1/rsvp",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "package": {},
        "memory": 128,
        "runtime": "python3.8",
        "vpc": {},
        "versionLogicalId": "RsvpReadLambdaLambdaVersionxRsR7WwhnrvP2VvhMvaqdg5xD0Xk6p5RncSqG4q7wqs"
      }
    },
    "resources": {
      "Resources": {
        "LambdaBasePolicy": {
          "Type": "AWS::IAM::ManagedPolicy",
          "Properties": {
            "ManagedPolicyName": {
              "Fn::Sub": "wedding-website-angular-lambda-base-policy-dev"
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:GetRole"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:aws:iam::722958364712:role/wedding-website-angular-*-dev"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:GetFunctionConfiguration",
                    "lambda:GetFunction",
                    "lambda:InvokeFunction",
                    "lambda:GetEventSourceMapping"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:lambda:us-east-1:722958364712:function:wedding-website-angular-*-dev"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:DescribeSecurityGroups"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "WriteToCloudWatchLogs",
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "ListObjectsInThisAppsBucketsAcrossStageAccounts",
                  "Effect": "Allow",
                  "Action": "s3:ListBucket",
                  "Resource": "arn:aws:s3:::wedding-website-angular-*"
                },
                {
                  "Sid": "AllObjectActionsInThisAppsBucketsAcrossStageAccounts",
                  "Effect": "Allow",
                  "Action": [
                    "s3:*Object",
                    "s3:*ObjectAcl"
                  ],
                  "Resource": "arn:aws:s3:::wedding-website-angular-*/*"
                }
              ]
            }
          }
        },
        "LambdaBaseRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "RoleName": "wedding-website-angular-lambda-base-role",
            "Description": "Provides common Lambda function permissions necessary for accessing resources during execution.",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "Path": "/",
            "ManagedPolicyArns": [
              {
                "Ref": "LambdaBasePolicy"
              }
            ]
          }
        },
        "DataBucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "wedding-website-angular-rsvp-bucket-s3-dev"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "error",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "projectDir": "./",
      "frameworkVersion": "2",
      "configValidationMode": "error",
      "useDotenv": true,
      "variablesResolutionMode": "20210326",
      "package": {
        "patterns": [
          "!.idea/**",
          "!node_modules/**",
          "!venv/**",
          "!./functions/**/node_modules/**",
          "!tests/**",
          "!dev-utils/**",
          "!*-pkg/**/*"
        ],
        "artifact": "C:\\Users\\npado\\workspace\\wedding-website-angular\\serverless\\.serverless\\wedding-website-angular.zip",
        "artifactDirectoryName": "serverless/wedding-website-angular/dev/1627333392121-2021-07-26T21:03:12.121Z"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      }
    },
    "layers": {
      "pythonRequirements": {
        "artifact": ".serverless\\pythonRequirements.zip",
        "name": "wedding-website-angular-libraries-lambda-layer-dev",
        "description": "Python requirements lambda layer",
        "compatibleRuntimes": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"PythonRequirementsLambdaLayer\"][\"Properties\"][\"CompatibleRuntimes\"]"
        },
        "retain": false,
        "package": {}
      }
    },
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "C:\\Users\\npado\\workspace\\wedding-website-angular\\serverless\\.serverless\\wedding-website-angular.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/wedding-website-angular/dev/1627333392121-2021-07-26T21:03:12.121Z",
    "artifact": "wedding-website-angular.zip"
  }
}